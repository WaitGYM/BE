generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id    Int    @id @default(autoincrement())
  email String @unique
  name  String

  // OAuth 전용 필드
  googleId String  @unique
  avatar   String?

  createdAt    DateTime      @default(now())
  reservations Reservation[]
  favorites    Favorite[]

  // 웨이팅 시스템 관계 추가
  equipmentUsages EquipmentUsage[]
  waitingQueues   WaitingQueue[]

  // 🆕 루틴 시스템 관계
  workoutRoutines WorkoutRoutine[]
}

model Equipment {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  imageUrl     String?
  category     String // 부위별 카테고리 (가슴, 등, 다리, 어깨, 팔, 유산소 등)
  muscleGroup  String? // 세부 근육 그룹 (선택사항)
  createdAt    DateTime      @default(now())
  reservations Reservation[]
  favorites    Favorite[]

  // 웨이팅 시스템 관계 추가
  equipmentUsages EquipmentUsage[]
  waitingQueues   WaitingQueue[]

  // 🆕 루틴 시스템 관계
  routineExercises RoutineExercise[]
}

model Favorite {
  id          Int      @id @default(autoincrement())
  userId      Int
  equipmentId Int
  createdAt   DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  equipment Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@unique([userId, equipmentId]) // 중복 즐겨찾기 방지
}

// 기존 예약 시스템 (시간 기반) - 호환성 유지
model Reservation {
  id          Int      @id @default(autoincrement())
  userId      Int
  equipmentId Int
  startAt     DateTime
  endAt       DateTime
  sets        Int      @default(1)
  restSeconds Int      @default(180)
  status      String   @default("BOOKED")

  user      User      @relation(fields: [userId], references: [id])
  equipment Equipment @relation(fields: [equipmentId], references: [id])

  @@index([equipmentId, startAt, endAt])
}

// 🔥 웨이팅 시스템: 현재 기구 사용 상태
model EquipmentUsage {
  id             Int       @id @default(autoincrement())
  equipmentId    Int
  userId         Int
  startedAt      DateTime  @default(now())
  endedAt        DateTime? // 사용 완료 시간
  estimatedEndAt DateTime? // 예상 종료 시간 (선택사항)
  // 총 세트 & 휴식
  totalSets      Int       @default(1) // 총 세트 수
  restSeconds    Int       @default(180) // 세트 사이 휴식(분)

  // 세션 상태
  status String @default("IN_USE") // IN_USE | COMPLETED

  // 🔥 세트/휴식 정밀 추적
  currentSet          Int       @default(1)
  setStatus           String    @default("EXERCISING") // EXERCISING | RESTING | COMPLETED | STOPPED | FORCE_COMPLETED
  currentSetStartedAt DateTime?
  restStartedAt       DateTime?

  createdAt DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Restrict)
  equipment Equipment @relation(fields: [equipmentId], references: [id], onDelete: Restrict)

  @@index([equipmentId, status])
}

// 🔥 웨이팅 시스템: 대기열 관리  
model WaitingQueue {
  id            Int       @id @default(autoincrement())
  equipmentId   Int
  userId        Int
  queuePosition Int // 대기 순서 (1, 2, 3, ...)
  status        String    @default("WAITING") // WAITING, NOTIFIED, COMPLETED, CANCELLED, EXPIRED
  createdAt     DateTime  @default(now())
  notifiedAt    DateTime? // 알림 발송 시간
  updatedAt     DateTime  @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  equipment Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@unique([equipmentId, userId, status], name: "unique_active_queue") // 같은 기구에 중복 대기 방지
  @@index([equipmentId, queuePosition])
  @@index([equipmentId, status])
}

// 🆕 운동 루틴 모델
model WorkoutRoutine {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises RoutineExercise[]

  @@index([userId, isActive])
}

// 🆕 루틴 내 운동 항목 모델
model RoutineExercise {
  id          Int      @id @default(autoincrement())
  routineId   Int
  equipmentId Int
  order       Int // 루틴 내 순서
  targetSets  Int      @default(3)
  targetReps  String? // "8-12" 또는 "10" 형태
  restMinutes Int      @default(3)
  notes       String? // 개인 메모 (무게, 특이사항 등)
  createdAt   DateTime @default(now())

  routine   WorkoutRoutine @relation(fields: [routineId], references: [id], onDelete: Cascade)
  equipment Equipment      @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@unique([routineId, equipmentId]) // 한 루틴에 같은 기구 중복 방지
  @@index([routineId, order])
}
